-module({{ module.name | lowfirst }}).
-include("{{ module.name | lowfirst }}.hrl").

-export([encode/2, decode/2]).

%% todo export types

%% todo spec
{% for datatype in module.datatypes %}
encode({{datatype.name | lowfirst}}, {{datatype.name | capfirst}}) ->
    case {{datatype.name | capfirst}} of
{% for variant in datatype.variants %}
{% if variant.value.type == "record" %}
        % todo
{% elif variant.value.type == "simple" %}
        {{{variant.constructor | lowfirst}}, variant.value.fields|} -> {<<"{{variant.constructor}}">>, {{ variant.value.fields|to_binary|join:", " }}};
{% elif variant.value.type == "single" %}
        {{variant.constructor | lowfirst}} -> <<"{{variant.constructor}}">>;
{% endif %}
{% endfor %}
        _ -> error({bad_data, {{datatype.name | lowfirst}}, {{datatype.name | capfirst}}})
    end;
{% endfor %}

encode(string, String) when is_list(String) ->
    list_to_binary(String);
encode(string, String) when is_binary(String) ->
    String;
encode(bool, Boolean) when (Boolean =:= true) or (Boolean =:= false) ->
    Boolean;
encode(integer, Integer) when is_integer(Integer) ->
    Integer;
encode(float, Float) when is_float(Float) ->
    Float;
encode(binary, Binary) when is_binary(Binary) ->
    Binary;
encode({list, A}, List) when is_list(List) ->
    [encode(A, E) || E <- List];
encode({map, A, B}, Map) when is_list(Map) ->
    [{encode(A, K), encode(B, V)} || {K, V} <- Map];

encode(Type, _) -> error({bad_type, Type}).

%% todo decode
